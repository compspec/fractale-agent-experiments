[
    {
        "agent": "build",
        "total_seconds": 213.66821745100003,
        "result": "# Base image: Ubuntu 22.04 LTS (Jammy Jellyfish)\n# A stable, widely-used base for builds.\nFROM ubuntu:22.04\n\n# Set non-interactive frontend for package managers to prevent prompts\nENV DEBIAN_FRONTEND=noninteractive\n\n# Install dependencies, clone LAMMPS source, build, install, and clean up in a single layer\n# This approach minimizes the number of layers and the final image size.\nRUN apt-get update && \\\n    # Install build-time and runtime dependencies.\n    # build-essential, cmake, git, gfortran, libopenmpi-dev: Required for compiling LAMMPS.\n    # ca-certificates: Added to fix SSL certificate verification errors during git clone.\n    # openmpi-bin, python3: Runtime dependencies for LAMMPS with MPI.\n    apt-get install -y --no-install-recommends \\\n    build-essential \\\n    ca-certificates \\\n    cmake \\\n    git \\\n    gfortran \\\n    libopenmpi-dev \\\n    openmpi-bin \\\n    python3 && \\\n    # Clone the latest (default) branch of the LAMMPS repository.\n    # --depth 1 creates a shallow clone to reduce download size.\n    # The --branch flag is removed to ensure the latest development branch is cloned.\n    git clone --depth 1 https://github.com/lammps/lammps.git /opt/lammps-src && \\\n    # Create a dedicated build directory\n    mkdir /opt/lammps-build && \\\n    cd /opt/lammps-build && \\\n    # Configure the build using CMake.\n    # -D CMAKE_INSTALL_PREFIX=/usr/local: Installs binaries to a standard PATH location.\n    # -D BUILD_MPI=yes: Enables MPI support, crucial for parallel execution.\n    # -D PKG_REAXFF=yes: Enables the ReaxFF package, as required by the example files.\n    cmake ../lammps-src/cmake \\\n      -D CMAKE_INSTALL_PREFIX=/usr/local \\\n      -D BUILD_MPI=yes \\\n      -D PKG_REAXFF=yes && \\\n    # Compile LAMMPS using all available processor cores for speed.\n    make -j$(nproc) && \\\n    # Install the compiled binaries. The 'lmp' executable will be placed in /usr/local/bin.\n    make install && \\\n    # Create the final working directory for simulation data.\n    mkdir /simulation && \\\n    # As requested, copy all files from the ReaxFF HNS example into the working directory.\n    cp /opt/lammps-src/examples/reaxff/HNS/* /simulation/ && \\\n    # Clean up build-time artifacts and source files to reduce the final image size.\n    cd / && rm -rf /opt/lammps-src /opt/lammps-build && \\\n    # Remove packages that were only needed for building LAMMPS.\n    # Runtime dependencies like 'openmpi-bin' and its libraries are kept.\n    apt-get purge -y --auto-remove \\\n      build-essential \\\n      cmake \\\n      git \\\n      gfortran \\\n      libopenmpi-dev && \\\n    # Clean apt cache and lists.\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Set the container's working directory to where the example files were copied.\nWORKDIR /simulation\n\n# Configure OpenMPI environment variables for optimal performance and compatibility\n# in containerized environments like Kubernetes.\n# Allow OpenMPI to be run by the root user, which is the default in this container.\nENV OMPI_ALLOW_RUN_AS_ROOT=1\nENV OMPI_ALLOW_RUN_AS_ROOT_CONFIRM=1\n# Tell OpenMPI to exclude loopback and Docker-internal network interfaces from its search,\n# ensuring it uses the primary container network interface.\nENV OMPI_MCA_btl_tcp_if_exclude=lo,docker0\n# Allow oversubscribing compute resources, which can be useful in some cluster configurations.\nENV OMPI_MCA_rmaps_base_oversubscribe=1\n\n# Set the default command. When the container starts without arguments, it will execute 'lmp',\n# which prints the LAMMPS version and help information.\n# To run a simulation, use 'docker run <image> lmp -in <input_script>'.\nCMD [\"lmp\"]",
        "attempts": 1,
        "metadata": {
            "steps": [
                {
                    "item": "# Base image: Ubuntu 22.04 LTS (Jammy Jellyfish)\n# A stable, widely-used base for builds.\nFROM ubuntu:22.04\n\n# Set non-interactive frontend for package managers to prevent prompts\nENV DEBIAN_FRONTEND=noninteractive\n\n# Install dependencies, clone LAMMPS source, build, install, and clean up in a single layer\n# This approach minimizes the number of layers and the final image size.\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends \\\n    build-essential \\\n    cmake \\\n    git \\\n    gfortran \\\n    libopenmpi-dev \\\n    openmpi-bin \\\n    python3 && \\\n    # Clone the stable branch of the LAMMPS repository for a production-ready build.\n    # A shallow clone (--depth 1) is used to reduce download size.\n    git clone --depth 1 --branch stable https://github.com/lammps/lammps.git /opt/lammps-src && \\\n    # Create a dedicated build directory\n    mkdir /opt/lammps-build && \\\n    cd /opt/lammps-build && \\\n    # Configure the build using CMake.\n    # -D BUILD_MPI=yes: Enables MPI support, crucial for parallel execution.\n    # -D PKG_REAXFF=yes: Enables the ReaxFF package, as requested by the example files.\n    # Other common packages could be enabled here as needed, e.g., -D PKG_KSPACE=yes\n    cmake ../lammps-src/cmake \\\n      -D CMAKE_INSTALL_PREFIX=/usr/local \\\n      -D BUILD_MPI=yes \\\n      -D PKG_REAXFF=yes && \\\n    # Compile LAMMPS using all available processor cores for speed.\n    make -j$(nproc) && \\\n    # Install the compiled binaries. The 'lmp' executable will be placed in /usr/local/bin,\n    # which is included in the system's default PATH.\n    make install && \\\n    # Create the final working directory for simulation data.\n    mkdir /simulation && \\\n    # As requested, copy all files from the ReaxFF HNS example into the working directory.\n    cp /opt/lammps-src/examples/reaxff/HNS/* /simulation/ && \\\n    # Clean up build-time dependencies and source files to reduce the final image size.\n    # The LAMMPS source and build directories are no longer needed.\n    cd / && rm -rf /opt/lammps-src /opt/lammps-build && \\\n    # Remove packages that were only needed for building LAMMPS.\n    # Runtime dependencies like 'openmpi-bin' and its libraries are kept.\n    apt-get purge -y --auto-remove \\\n      build-essential \\\n      cmake \\\n      git \\\n      gfortran \\\n      libopenmpi-dev && \\\n    # Clean apt cache and lists.\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Set the container's working directory to where the example files were copied.\nWORKDIR /simulation\n\n# Configure OpenMPI environment variables for optimal performance and compatibility\n# in containerized environments like Kubernetes.\n# Allow OpenMPI to be run by the root user, which is the default in this container.\nENV OMPI_ALLOW_RUN_AS_ROOT=1\nENV OMPI_ALLOW_RUN_AS_ROOT_CONFIRM=1\n# Tell OpenMPI to exclude loopback and Docker-internal network interfaces from its search,\n# ensuring it uses the primary container network interface.\nENV OMPI_MCA_btl_tcp_if_exclude=lo,docker0\n# Allow oversubscribing compute resources, which can be useful in some cluster configurations.\nENV OMPI_MCA_rmaps_base_oversubscribe=1\n\n# Set the default command. When the container starts without arguments, it will execute 'lmp',\n# which prints the LAMMPS version and help information.\n# To run a simulation, use 'docker run <image> lmp -in <input_script>'.\nCMD [\"lmp\"]",
                    "type": "dockerfile",
                    "attempt": 0
                },
                {
                    "item": "# Base image: Ubuntu 22.04 LTS (Jammy Jellyfish)\n# A stable, widely-used base for builds.\nFROM ubuntu:22.04\n\n# Set non-interactive frontend for package managers to prevent prompts\nENV DEBIAN_FRONTEND=noninteractive\n\n# Install dependencies, clone LAMMPS source, build, install, and clean up in a single layer\n# This approach minimizes the number of layers and the final image size.\nRUN apt-get update && \\\n    # Install build-time and runtime dependencies.\n    # build-essential, cmake, git, gfortran, libopenmpi-dev: Required for compiling LAMMPS.\n    # ca-certificates: Added to fix SSL certificate verification errors during git clone.\n    # openmpi-bin, python3: Runtime dependencies for LAMMPS with MPI.\n    apt-get install -y --no-install-recommends \\\n    build-essential \\\n    ca-certificates \\\n    cmake \\\n    git \\\n    gfortran \\\n    libopenmpi-dev \\\n    openmpi-bin \\\n    python3 && \\\n    # Clone the latest (default) branch of the LAMMPS repository.\n    # --depth 1 creates a shallow clone to reduce download size.\n    # The --branch flag is removed to ensure the latest development branch is cloned.\n    git clone --depth 1 https://github.com/lammps/lammps.git /opt/lammps-src && \\\n    # Create a dedicated build directory\n    mkdir /opt/lammps-build && \\\n    cd /opt/lammps-build && \\\n    # Configure the build using CMake.\n    # -D CMAKE_INSTALL_PREFIX=/usr/local: Installs binaries to a standard PATH location.\n    # -D BUILD_MPI=yes: Enables MPI support, crucial for parallel execution.\n    # -D PKG_REAXFF=yes: Enables the ReaxFF package, as required by the example files.\n    cmake ../lammps-src/cmake \\\n      -D CMAKE_INSTALL_PREFIX=/usr/local \\\n      -D BUILD_MPI=yes \\\n      -D PKG_REAXFF=yes && \\\n    # Compile LAMMPS using all available processor cores for speed.\n    make -j$(nproc) && \\\n    # Install the compiled binaries. The 'lmp' executable will be placed in /usr/local/bin.\n    make install && \\\n    # Create the final working directory for simulation data.\n    mkdir /simulation && \\\n    # As requested, copy all files from the ReaxFF HNS example into the working directory.\n    cp /opt/lammps-src/examples/reaxff/HNS/* /simulation/ && \\\n    # Clean up build-time artifacts and source files to reduce the final image size.\n    cd / && rm -rf /opt/lammps-src /opt/lammps-build && \\\n    # Remove packages that were only needed for building LAMMPS.\n    # Runtime dependencies like 'openmpi-bin' and its libraries are kept.\n    apt-get purge -y --auto-remove \\\n      build-essential \\\n      cmake \\\n      git \\\n      gfortran \\\n      libopenmpi-dev && \\\n    # Clean apt cache and lists.\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Set the container's working directory to where the example files were copied.\nWORKDIR /simulation\n\n# Configure OpenMPI environment variables for optimal performance and compatibility\n# in containerized environments like Kubernetes.\n# Allow OpenMPI to be run by the root user, which is the default in this container.\nENV OMPI_ALLOW_RUN_AS_ROOT=1\nENV OMPI_ALLOW_RUN_AS_ROOT_CONFIRM=1\n# Tell OpenMPI to exclude loopback and Docker-internal network interfaces from its search,\n# ensuring it uses the primary container network interface.\nENV OMPI_MCA_btl_tcp_if_exclude=lo,docker0\n# Allow oversubscribing compute resources, which can be useful in some cluster configurations.\nENV OMPI_MCA_rmaps_base_oversubscribe=1\n\n# Set the default command. When the container starts without arguments, it will execute 'lmp',\n# which prints the LAMMPS version and help information.\n# To run a simulation, use 'docker run <image> lmp -in <input_script>'.\nCMD [\"lmp\"]",
                    "type": "dockerfile",
                    "attempt": 1
                }
            ],
            "logs": [
                {
                    "item": "# Base image: Ubuntu 22.04 LTS (Jammy Jellyfish)\n# A stable, widely-used base for builds.\nFROM ubuntu:22.04\n\n# Set non-interactive frontend for package managers to prevent prompts\nENV DEBIAN_FRONTEND=noninteractive\n\n# Install dependencies, clone LAMMPS source, build, install, and clean up in a single layer\n# This approach minimizes the number of layers and the final image size.\nRUN apt-get update && \\\n    # Install build-time and runtime dependencies.\n    # build-essential, cmake, git, gfortran, libopenmpi-dev: Required for compiling LAMMPS.\n    # ca-certificates: Added to fix SSL certificate verification errors during git clone.\n    # openmpi-bin, python3: Runtime dependencies for LAMMPS with MPI.\n    apt-get install -y --no-install-recommends \\\n    build-essential \\\n    ca-certificates \\\n    cmake \\\n    git \\\n    gfortran \\\n    libopenmpi-dev \\\n    openmpi-bin \\\n    python3 && \\\n    # Clone the latest (default) branch of the LAMMPS repository.\n    # --depth 1 creates a shallow clone to reduce download size.\n    # The --branch flag is removed to ensure the latest development branch is cloned.\n    git clone --depth 1 https://github.com/lammps/lammps.git /opt/lammps-src && \\\n    # Create a dedicated build directory\n    mkdir /opt/lammps-build && \\\n    cd /opt/lammps-build && \\\n    # Configure the build using CMake.\n    # -D CMAKE_INSTALL_PREFIX=/usr/local: Installs binaries to a standard PATH location.\n    # -D BUILD_MPI=yes: Enables MPI support, crucial for parallel execution.\n    # -D PKG_REAXFF=yes: Enables the ReaxFF package, as required by the example files.\n    cmake ../lammps-src/cmake \\\n      -D CMAKE_INSTALL_PREFIX=/usr/local \\\n      -D BUILD_MPI=yes \\\n      -D PKG_REAXFF=yes && \\\n    # Compile LAMMPS using all available processor cores for speed.\n    make -j$(nproc) && \\\n    # Install the compiled binaries. The 'lmp' executable will be placed in /usr/local/bin.\n    make install && \\\n    # Create the final working directory for simulation data.\n    mkdir /simulation && \\\n    # As requested, copy all files from the ReaxFF HNS example into the working directory.\n    cp /opt/lammps-src/examples/reaxff/HNS/* /simulation/ && \\\n    # Clean up build-time artifacts and source files to reduce the final image size.\n    cd / && rm -rf /opt/lammps-src /opt/lammps-build && \\\n    # Remove packages that were only needed for building LAMMPS.\n    # Runtime dependencies like 'openmpi-bin' and its libraries are kept.\n    apt-get purge -y --auto-remove \\\n      build-essential \\\n      cmake \\\n      git \\\n      gfortran \\\n      libopenmpi-dev && \\\n    # Clean apt cache and lists.\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Set the container's working directory to where the example files were copied.\nWORKDIR /simulation\n\n# Configure OpenMPI environment variables for optimal performance and compatibility\n# in containerized environments like Kubernetes.\n# Allow OpenMPI to be run by the root user, which is the default in this container.\nENV OMPI_ALLOW_RUN_AS_ROOT=1\nENV OMPI_ALLOW_RUN_AS_ROOT_CONFIRM=1\n# Tell OpenMPI to exclude loopback and Docker-internal network interfaces from its search,\n# ensuring it uses the primary container network interface.\nENV OMPI_MCA_btl_tcp_if_exclude=lo,docker0\n# Allow oversubscribing compute resources, which can be useful in some cluster configurations.\nENV OMPI_MCA_rmaps_base_oversubscribe=1\n\n# Set the default command. When the container starts without arguments, it will execute 'lmp',\n# which prints the LAMMPS version and help information.\n# To run a simulation, use 'docker run <image> lmp -in <input_script>'.\nCMD [\"lmp\"]",
                    "type": "final-result",
                    "total_seconds": 213.66819882392883
                }
            ]
        }
    },
    {
        "agent": "kubernetes-job",
        "total_seconds": 88.76195763600003,
        "result": "# Kubernetes Job manifest for a LAMMPS simulation.\n# API Version for Job resource is batch/v1.\napiVersion: batch/v1\n# Specifies the resource type as Job.\nkind: Job\nmetadata:\n  # The name of the Job. Must be unique within the namespace.\n  name: lammps-reaxff-hns-job\n  # Deploys the Job to the 'default' namespace as requested.\n  namespace: default\nspec:\n  # Specifies the number of retries before marking the Job as failed.\n  # Set to 1 as requested, meaning it will attempt the pod run twice total (initial + 1 retry).\n  backoffLimit: 1\n  # Automatically clean up the finished Job (and its Pods) after 1 hour (3600 seconds).\n  # This is a best practice for production environments to prevent clutter.\n  ttlSecondsAfterFinished: 3600\n  # The template for the Pod that the Job will create.\n  template:\n    spec:\n      # Defines the containers to be run in the Pod.\n      containers:\n        # The exact container name as requested.\n      - name: lammps\n        # The image name is set to 'lammps' to match a locally available or custom-built container image.\n        image: lammps\n        # imagePullPolicy is set to 'Never' as requested.\n        # This requires the image to be pre-pulled or available on the node.\n        imagePullPolicy: Never\n        # Overrides the container's default command to run the specific LAMMPS simulation.\n        # Assumes 'lmp' is in the system's PATH.\n        command: [\"lmp\"]\n        # Arguments passed to the command. Each part of the command string is a separate list item.\n        args:\n        - \"-v\"\n        - \"x\"\n        - \"2\"\n        - \"-v\"\n        - \"y\"\n        - \"2\"\n        - \"-v\"\n        - \"z\"\n        - \"2\"\n        - \"-in\"\n        - \"./in.reaxff.hns\"\n        - \"-nocite\"\n        # Resource requests and limits for a Google Cloud CPU instance.\n        # Setting requests equal to limits provides a Guaranteed Quality of Service (QoS) class,\n        # which is ideal for performance-sensitive batch jobs.\n        resources:\n          requests:\n            # Requesting 1 full CPU core.\n            cpu: \"1\"\n            # Requesting 2 GiB of memory.\n            memory: \"2Gi\"\n          limits:\n            # Limiting to 1 full CPU core to prevent noisy neighbor issues.\n            cpu: \"1\"\n            # Limiting to 2 GiB of memory to prevent OOM kills from impacting the node.\n            memory: \"2Gi\"\n      # The restart policy for the Pod. 'OnFailure' is required for Jobs.\n      # The Job controller, not the Kubelet, handles pod recreation based on backoffLimit.\n      restartPolicy: OnFailure",
        "attempts": 1,
        "metadata": {
            "logs": [
                {
                    "item": "LAMMPS (22 Jul 2025 - Development - 8b7fdf9)\nOMP_NUM_THREADS environment is not set. Defaulting to 1 thread.\n  using 1 OpenMP thread(s) per MPI task\nReading data file ...\n  triclinic box = (0 0 0) to (22.326 11.1412 13.778966) with tilt (0 -5.02603 0)\n  1 by 1 by 1 MPI processor grid\n  reading atoms ...\n  304 atoms\n  reading velocities ...\n  304 velocities\n  read_data CPU = 0.007 seconds\nReplication is creating a 2x2x2 = 8 times larger system...\n  triclinic box = (0 0 0) to (44.652 22.2824 27.557932) with tilt (0 -10.05206 0)\n  1 by 1 by 1 MPI processor grid\n  bounding box image = (0 -1 -1) to (0 1 1)\n  bounding box extra memory = 0.03 MB\n  average # of replicas added to proc = 8.00 out of 8 (100.00%)\n  2432 atoms\n  replicate CPU = 0.000 seconds\nNeighbor list info ...\n  update: every = 20 steps, delay = 0 steps, check = no\n  max neighbors/atom: 2000, page size: 100000\n  master list distance cutoff = 11\n  ghost atom cutoff = 11\n  binsize = 5.5, bins = 10 5 6\n  2 neighbor lists, perpetual/occasional/extra = 2 0 0\n  (1) pair reaxff, perpetual\n      attributes: half, newton off, ghost\n      pair build: half/bin/ghost/newtoff\n      stencil: full/ghost/bin/3d\n      bin: standard\n  (2) fix qeq/reax, perpetual, copy from (1)\n      attributes: half, newton off\n      pair build: copy\n      stencil: none\n      bin: none\nSetting up Verlet run ...\n  Unit style    : real\n  Current step  : 0\n  Time step     : 0.1\nPer MPI rank memory allocation (min/avg/max) = 215 | 215 | 215 Mbytes\n   Step          Temp          PotEng         Press          E_vdwl         E_coul         Volume    \n         0   300           -113.27833      437.52149     -111.57687     -1.7014647      27418.867    \n        10   299.38517     -113.27631      1439.2564     -111.57492     -1.7013814      27418.867    \n        20   300.27107     -113.27884      3764.4017     -111.57762     -1.7012246      27418.867    \n        30   302.21064     -113.28428      7007.6558     -111.58335     -1.7009364      27418.867    \n        40   303.52265     -113.28799      9844.8196     -111.58747     -1.7005186      27418.867    \n        50   301.8706      -113.28324      9663.08       -111.58318     -1.7000523      27418.867    \n        60   296.67808     -113.26777      7273.8875     -111.56815     -1.6996136      27418.867    \n        70   292.19999     -113.25435      5533.625      -111.55514     -1.6992157      27418.867    \n        80   293.58678     -113.25831      5993.4679     -111.55946     -1.6988532      27418.867    \n        90   300.62637     -113.27925      7202.8453     -111.58069     -1.6985592      27418.867    \n       100   305.38277     -113.29357      10085.747     -111.59518     -1.6983875      27418.867    \nLoop time of 15.5178 on 1 procs for 100 steps with 2432 atoms\n\nPerformance: 0.056 ns/day, 431.050 hours/ns, 6.444 timesteps/s, 15.672 katom-step/s\n100.0% CPU use with 1 MPI tasks x 1 OpenMP threads\n\nMPI task timing breakdown:\nSection |  min time  |  avg time  |  max time  |%varavg| %total\n---------------------------------------------------------------\nPair    | 11.215     | 11.215     | 11.215     |   0.0 | 72.27\nNeigh   | 0.26171    | 0.26171    | 0.26171    |   0.0 |  1.69\nComm    | 0.0048011  | 0.0048011  | 0.0048011  |   0.0 |  0.03\nOutput  | 0.0002703  | 0.0002703  | 0.0002703  |   0.0 |  0.00\nModify  | 4.035      | 4.035      | 4.035      |   0.0 | 26.00\nOther   |            | 0.0007968  |            |       |  0.01\n\nNlocal:           2432 ave        2432 max        2432 min\nHistogram: 1 0 0 0 0 0 0 0 0 0\nNghost:          10685 ave       10685 max       10685 min\nHistogram: 1 0 0 0 0 0 0 0 0 0\nNeighs:         823958 ave      823958 max      823958 min\nHistogram: 1 0 0 0 0 0 0 0 0 0\n\nTotal # of neighbors = 823958\nAve neighs/atom = 338.79852\nNeighbor list builds = 5\nDangerous builds not checked\nTotal wall time: 0:00:15\n",
                    "type": "log",
                    "attempt": 1
                },
                {
                    "item": "# Kubernetes Job manifest for a LAMMPS simulation.\n# API Version for Job resource is batch/v1.\napiVersion: batch/v1\n# Specifies the resource type as Job.\nkind: Job\nmetadata:\n  # The name of the Job. Must be unique within the namespace.\n  name: lammps-reaxff-hns-job\n  # Deploys the Job to the 'default' namespace as requested.\n  namespace: default\nspec:\n  # Specifies the number of retries before marking the Job as failed.\n  # Set to 1 as requested, meaning it will attempt the pod run twice total (initial + 1 retry).\n  backoffLimit: 1\n  # Automatically clean up the finished Job (and its Pods) after 1 hour (3600 seconds).\n  # This is a best practice for production environments to prevent clutter.\n  ttlSecondsAfterFinished: 3600\n  # The template for the Pod that the Job will create.\n  template:\n    spec:\n      # Defines the containers to be run in the Pod.\n      containers:\n        # The exact container name as requested.\n      - name: lammps\n        # The image name is set to 'lammps' to match a locally available or custom-built container image.\n        image: lammps\n        # imagePullPolicy is set to 'Never' as requested.\n        # This requires the image to be pre-pulled or available on the node.\n        imagePullPolicy: Never\n        # Overrides the container's default command to run the specific LAMMPS simulation.\n        # Assumes 'lmp' is in the system's PATH.\n        command: [\"lmp\"]\n        # Arguments passed to the command. Each part of the command string is a separate list item.\n        args:\n        - \"-v\"\n        - \"x\"\n        - \"2\"\n        - \"-v\"\n        - \"y\"\n        - \"2\"\n        - \"-v\"\n        - \"z\"\n        - \"2\"\n        - \"-in\"\n        - \"./in.reaxff.hns\"\n        - \"-nocite\"\n        # Resource requests and limits for a Google Cloud CPU instance.\n        # Setting requests equal to limits provides a Guaranteed Quality of Service (QoS) class,\n        # which is ideal for performance-sensitive batch jobs.\n        resources:\n          requests:\n            # Requesting 1 full CPU core.\n            cpu: \"1\"\n            # Requesting 2 GiB of memory.\n            memory: \"2Gi\"\n          limits:\n            # Limiting to 1 full CPU core to prevent noisy neighbor issues.\n            cpu: \"1\"\n            # Limiting to 2 GiB of memory to prevent OOM kills from impacting the node.\n            memory: \"2Gi\"\n      # The restart policy for the Pod. 'OnFailure' is required for Jobs.\n      # The Job controller, not the Kubelet, handles pod recreation based on backoffLimit.\n      restartPolicy: OnFailure",
                    "type": "final-result",
                    "total_seconds": 88.7619366645813
                }
            ]
        }
    }
]