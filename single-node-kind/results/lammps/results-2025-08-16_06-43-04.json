[
    {
        "agent": "build",
        "total_seconds": 274.6802744430006,
        "result": "# Base Image: Ubuntu 22.04 LTS for a stable and well-supported environment\nFROM ubuntu:22.04\n\n# Set non-interactive frontend for package installations to prevent prompts\nENV DEBIAN_FRONTEND=noninteractive\n\n# Install build dependencies, clone, build, and install LAMMPS, then clean up in a single RUN command to minimize layer size.\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends \\\n    build-essential \\\n    ca-certificates \\\n    cmake \\\n    git \\\n    python3 \\\n    libfftw3-dev \\\n    libopenmpi-dev \\\n    openmpi-bin \\\n    && \\\n    # Clone the latest LAMMPS source code into a temporary directory\n    git clone --depth 1 https://github.com/lammps/lammps.git /opt/lammps-src && \\\n    cd /opt/lammps-src && \\\n    # Create a build directory\n    mkdir build && cd build && \\\n    # Configure the build with CMake for a CPU environment with MPI.\n    # Enable a set of common and useful packages, including the requested REAXFF.\n    cmake ../cmake \\\n        -D CMAKE_INSTALL_PREFIX=/usr/local \\\n        -D BUILD_MPI=yes \\\n        -D PKG_KSPACE=yes \\\n        -D PKG_MANYBODY=yes \\\n        -D PKG_MOLECULE=yes \\\n        -D PKG_REAXFF=yes \\\n        -D PKG_RIGID=yes \\\n        -D PKG_SRD=yes \\\n    && \\\n    # Build LAMMPS using all available processor cores\n    make -j$(nproc) && \\\n    # Install the LAMMPS executable (lmp) to /usr/local/bin, which is in the system's PATH\n    make install && \\\n    # Create the final working directory\n    mkdir -p /app && \\\n    # Copy the specified example files into the working directory as requested\n    cp /opt/lammps-src/examples/reaxff/HNS/* /app/ && \\\n    # Clean up to reduce the final image size\n    # Remove the entire source code directory\n    cd / && rm -rf /opt/lammps-src && \\\n    # Remove build-time-only dependencies to keep the image lean\n    apt-get purge -y --auto-remove build-essential cmake git python3 libfftw3-dev libopenmpi-dev && \\\n    # Clean apt caches\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Set the working directory for the container.\n# This is where the example files are located and where simulations will run by default.\nWORKDIR /app\n\n# Configure OpenMPI environment variables for better performance and compatibility in containerized\n# environments like Docker and Kubernetes. These help avoid issues with process pinning and shared memory.\nENV OMPI_MCA_btl_vader_single_copy_mechanism=none \\\n    OMPI_MCA_rmaps_base_mapping_policy=slot \\\n    OMPI_MCA_orte_allowed_exit_without_sync=1\n\n# Set the entrypoint to the LAMMPS executable.\n# This makes the container behave like the 'lmp' command.\n# Users can run simulations with 'docker run <image_name> -in in.hns'.\nENTRYPOINT [\"lmp\"]\n\n# Provide a default command.\n# If the container is run without any arguments, it will print the LAMMPS help message.\nCMD [\"-h\"]",
        "attempts": 2,
        "metadata": {
            "steps": [
                {
                    "item": "# Base Image: Ubuntu 22.04 LTS for a stable and well-supported environment\nFROM ubuntu:22.04\n\n# Set non-interactive frontend for package installations to prevent prompts\nENV DEBIAN_FRONTEND=noninteractive\n\n# Install build dependencies, clone, build, and install LAMMPS, then clean up in a single RUN command to minimize layer size.\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends \\\n    build-essential \\\n    cmake \\\n    git \\\n    libfftw3-dev \\\n    libopenmpi-dev \\\n    openmpi-bin \\\n    && \\\n    # Clone the latest LAMMPS source code into a temporary directory\n    git clone --depth 1 https://github.com/lammps/lammps.git /opt/lammps-src && \\\n    cd /opt/lammps-src && \\\n    # Create a build directory\n    mkdir build && cd build && \\\n    # Configure the build with CMake for a CPU environment with MPI.\n    # Enable a set of common and useful packages, including the requested REAXFF.\n    cmake ../cmake \\\n        -D CMAKE_INSTALL_PREFIX=/usr/local \\\n        -D BUILD_MPI=yes \\\n        -D PKG_KSPACE=yes \\\n        -D PKG_MANYBODY=yes \\\n        -D PKG_MOLECULE=yes \\\n        -D PKG_REAXFF=yes \\\n        -D PKG_RIGID=yes \\\n        -D PKG_SRD=yes \\\n    && \\\n    # Build LAMMPS using all available processor cores\n    make -j$(nproc) && \\\n    # Install the LAMMPS executable (lmp) to /usr/local/bin, which is in the system's PATH\n    make install && \\\n    # Create the final working directory\n    mkdir -p /app && \\\n    # Copy the specified example files into the working directory as requested\n    cp /opt/lammps-src/examples/reaxff/HNS/* /app/ && \\\n    # Clean up to reduce the final image size\n    # Remove the entire source code directory\n    cd / && rm -rf /opt/lammps-src && \\\n    # Remove build-time-only dependencies to keep the image lean\n    apt-get purge -y --auto-remove build-essential cmake git libfftw3-dev libopenmpi-dev && \\\n    # Clean apt caches\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Set the working directory for the container.\n# This is where the example files are located and where simulations will run by default.\nWORKDIR /app\n\n# Configure OpenMPI environment variables for better performance and compatibility in containerized\n# environments like Docker and Kubernetes. These help avoid issues with process pinning and shared memory.\nENV OMPI_MCA_btl_vader_single_copy_mechanism=none \\\n    OMPI_MCA_rmaps_base_mapping_policy=slot \\\n    OMPI_MCA_orte_allowed_exit_without_sync=1\n\n# Set the entrypoint to the LAMMPS executable.\n# This makes the container behave like the 'lmp' command.\n# Users can run simulations with 'docker run <image_name> -in in.hns'.\nENTRYPOINT [\"lmp\"]\n\n# Provide a default command.\n# If the container is run without any arguments, it will print the LAMMPS help message.\nCMD [\"-h\"]",
                    "type": "dockerfile",
                    "attempt": 0
                },
                {
                    "item": "# Base Image: Ubuntu 22.04 LTS for a stable and well-supported environment\nFROM ubuntu:22.04\n\n# Set non-interactive frontend for package installations to prevent prompts\nENV DEBIAN_FRONTEND=noninteractive\n\n# Install build dependencies, clone, build, and install LAMMPS, then clean up in a single RUN command to minimize layer size.\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends \\\n    build-essential \\\n    ca-certificates \\\n    cmake \\\n    git \\\n    libfftw3-dev \\\n    libopenmpi-dev \\\n    openmpi-bin \\\n    && \\\n    # Clone the latest LAMMPS source code into a temporary directory\n    git clone --depth 1 https://github.com/lammps/lammps.git /opt/lammps-src && \\\n    cd /opt/lammps-src && \\\n    # Create a build directory\n    mkdir build && cd build && \\\n    # Configure the build with CMake for a CPU environment with MPI.\n    # Enable a set of common and useful packages, including the requested REAXFF.\n    cmake ../cmake \\\n        -D CMAKE_INSTALL_PREFIX=/usr/local \\\n        -D BUILD_MPI=yes \\\n        -D PKG_KSPACE=yes \\\n        -D PKG_MANYBODY=yes \\\n        -D PKG_MOLECULE=yes \\\n        -D PKG_REAXFF=yes \\\n        -D PKG_RIGID=yes \\\n        -D PKG_SRD=yes \\\n    && \\\n    # Build LAMMPS using all available processor cores\n    make -j$(nproc) && \\\n    # Install the LAMMPS executable (lmp) to /usr/local/bin, which is in the system's PATH\n    make install && \\\n    # Create the final working directory\n    mkdir -p /app && \\\n    # Copy the specified example files into the working directory as requested\n    cp /opt/lammps-src/examples/reaxff/HNS/* /app/ && \\\n    # Clean up to reduce the final image size\n    # Remove the entire source code directory\n    cd / && rm -rf /opt/lammps-src && \\\n    # Remove build-time-only dependencies to keep the image lean\n    apt-get purge -y --auto-remove build-essential cmake git libfftw3-dev libopenmpi-dev && \\\n    # Clean apt caches\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Set the working directory for the container.\n# This is where the example files are located and where simulations will run by default.\nWORKDIR /app\n\n# Configure OpenMPI environment variables for better performance and compatibility in containerized\n# environments like Docker and Kubernetes. These help avoid issues with process pinning and shared memory.\nENV OMPI_MCA_btl_vader_single_copy_mechanism=none \\\n    OMPI_MCA_rmaps_base_mapping_policy=slot \\\n    OMPI_MCA_orte_allowed_exit_without_sync=1\n\n# Set the entrypoint to the LAMMPS executable.\n# This makes the container behave like the 'lmp' command.\n# Users can run simulations with 'docker run <image_name> -in in.hns'.\nENTRYPOINT [\"lmp\"]\n\n# Provide a default command.\n# If the container is run without any arguments, it will print the LAMMPS help message.\nCMD [\"-h\"]",
                    "type": "dockerfile",
                    "attempt": 1
                },
                {
                    "item": "# Base Image: Ubuntu 22.04 LTS for a stable and well-supported environment\nFROM ubuntu:22.04\n\n# Set non-interactive frontend for package installations to prevent prompts\nENV DEBIAN_FRONTEND=noninteractive\n\n# Install build dependencies, clone, build, and install LAMMPS, then clean up in a single RUN command to minimize layer size.\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends \\\n    build-essential \\\n    ca-certificates \\\n    cmake \\\n    git \\\n    python3 \\\n    libfftw3-dev \\\n    libopenmpi-dev \\\n    openmpi-bin \\\n    && \\\n    # Clone the latest LAMMPS source code into a temporary directory\n    git clone --depth 1 https://github.com/lammps/lammps.git /opt/lammps-src && \\\n    cd /opt/lammps-src && \\\n    # Create a build directory\n    mkdir build && cd build && \\\n    # Configure the build with CMake for a CPU environment with MPI.\n    # Enable a set of common and useful packages, including the requested REAXFF.\n    cmake ../cmake \\\n        -D CMAKE_INSTALL_PREFIX=/usr/local \\\n        -D BUILD_MPI=yes \\\n        -D PKG_KSPACE=yes \\\n        -D PKG_MANYBODY=yes \\\n        -D PKG_MOLECULE=yes \\\n        -D PKG_REAXFF=yes \\\n        -D PKG_RIGID=yes \\\n        -D PKG_SRD=yes \\\n    && \\\n    # Build LAMMPS using all available processor cores\n    make -j$(nproc) && \\\n    # Install the LAMMPS executable (lmp) to /usr/local/bin, which is in the system's PATH\n    make install && \\\n    # Create the final working directory\n    mkdir -p /app && \\\n    # Copy the specified example files into the working directory as requested\n    cp /opt/lammps-src/examples/reaxff/HNS/* /app/ && \\\n    # Clean up to reduce the final image size\n    # Remove the entire source code directory\n    cd / && rm -rf /opt/lammps-src && \\\n    # Remove build-time-only dependencies to keep the image lean\n    apt-get purge -y --auto-remove build-essential cmake git python3 libfftw3-dev libopenmpi-dev && \\\n    # Clean apt caches\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Set the working directory for the container.\n# This is where the example files are located and where simulations will run by default.\nWORKDIR /app\n\n# Configure OpenMPI environment variables for better performance and compatibility in containerized\n# environments like Docker and Kubernetes. These help avoid issues with process pinning and shared memory.\nENV OMPI_MCA_btl_vader_single_copy_mechanism=none \\\n    OMPI_MCA_rmaps_base_mapping_policy=slot \\\n    OMPI_MCA_orte_allowed_exit_without_sync=1\n\n# Set the entrypoint to the LAMMPS executable.\n# This makes the container behave like the 'lmp' command.\n# Users can run simulations with 'docker run <image_name> -in in.hns'.\nENTRYPOINT [\"lmp\"]\n\n# Provide a default command.\n# If the container is run without any arguments, it will print the LAMMPS help message.\nCMD [\"-h\"]",
                    "type": "dockerfile",
                    "attempt": 2
                }
            ],
            "logs": [
                {
                    "item": "# Base Image: Ubuntu 22.04 LTS for a stable and well-supported environment\nFROM ubuntu:22.04\n\n# Set non-interactive frontend for package installations to prevent prompts\nENV DEBIAN_FRONTEND=noninteractive\n\n# Install build dependencies, clone, build, and install LAMMPS, then clean up in a single RUN command to minimize layer size.\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends \\\n    build-essential \\\n    ca-certificates \\\n    cmake \\\n    git \\\n    python3 \\\n    libfftw3-dev \\\n    libopenmpi-dev \\\n    openmpi-bin \\\n    && \\\n    # Clone the latest LAMMPS source code into a temporary directory\n    git clone --depth 1 https://github.com/lammps/lammps.git /opt/lammps-src && \\\n    cd /opt/lammps-src && \\\n    # Create a build directory\n    mkdir build && cd build && \\\n    # Configure the build with CMake for a CPU environment with MPI.\n    # Enable a set of common and useful packages, including the requested REAXFF.\n    cmake ../cmake \\\n        -D CMAKE_INSTALL_PREFIX=/usr/local \\\n        -D BUILD_MPI=yes \\\n        -D PKG_KSPACE=yes \\\n        -D PKG_MANYBODY=yes \\\n        -D PKG_MOLECULE=yes \\\n        -D PKG_REAXFF=yes \\\n        -D PKG_RIGID=yes \\\n        -D PKG_SRD=yes \\\n    && \\\n    # Build LAMMPS using all available processor cores\n    make -j$(nproc) && \\\n    # Install the LAMMPS executable (lmp) to /usr/local/bin, which is in the system's PATH\n    make install && \\\n    # Create the final working directory\n    mkdir -p /app && \\\n    # Copy the specified example files into the working directory as requested\n    cp /opt/lammps-src/examples/reaxff/HNS/* /app/ && \\\n    # Clean up to reduce the final image size\n    # Remove the entire source code directory\n    cd / && rm -rf /opt/lammps-src && \\\n    # Remove build-time-only dependencies to keep the image lean\n    apt-get purge -y --auto-remove build-essential cmake git python3 libfftw3-dev libopenmpi-dev && \\\n    # Clean apt caches\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Set the working directory for the container.\n# This is where the example files are located and where simulations will run by default.\nWORKDIR /app\n\n# Configure OpenMPI environment variables for better performance and compatibility in containerized\n# environments like Docker and Kubernetes. These help avoid issues with process pinning and shared memory.\nENV OMPI_MCA_btl_vader_single_copy_mechanism=none \\\n    OMPI_MCA_rmaps_base_mapping_policy=slot \\\n    OMPI_MCA_orte_allowed_exit_without_sync=1\n\n# Set the entrypoint to the LAMMPS executable.\n# This makes the container behave like the 'lmp' command.\n# Users can run simulations with 'docker run <image_name> -in in.hns'.\nENTRYPOINT [\"lmp\"]\n\n# Provide a default command.\n# If the container is run without any arguments, it will print the LAMMPS help message.\nCMD [\"-h\"]",
                    "type": "final-result",
                    "total_seconds": 274.68025255203247
                }
            ]
        }
    },
    {
        "agent": "kubernetes-job",
        "total_seconds": 47.37230649400044,
        "result": "# This manifest creates a Kubernetes Job to run a single LAMMPS simulation.\n# It is designed for a standard Google Cloud Kubernetes Engine (GKE) environment using CPU instances.\napiVersion: batch/v1\nkind: Job\nmetadata:\n  # The name of the Job. Must be unique within the namespace.\n  name: lammps-reaxff-hns-job\nspec:\n  # The number of retries before considering a Job as failed.\n  # Set to 1 as requested, meaning it will try once and if it fails, it will retry one more time.\n  backoffLimit: 1\n  # The template for the Pod that the Job will create.\n  template:\n    spec:\n      # The restart policy for the Pod. 'OnFailure' is appropriate for Jobs.\n      # 'Never' is also a valid option, ensuring the Job controller creates a new Pod on failure.\n      restartPolicy: OnFailure\n      containers:\n      - name: lammps # The exact container name as requested.\n        # The Docker image to use. Note: 'lammps' is used here as a placeholder.\n        # In a real environment, this would be a fully-qualified image path\n        # like 'docker.io/lammps/lammps:latest' or a private registry path.\n        image: lammps\n        # imagePullPolicy is set to 'Never' as requested.\n        # This means the image must already be present on the cluster nodes.\n        imagePullPolicy: Never\n        # The command and arguments for the container, executing the LAMMPS simulation.\n        # The command executable must be in the container's PATH.\n        command: [\"lmp\"]\n        args:\n        - \"-v\"\n        - \"x\"\n        - \"2\"\n        - \"-v\"\n        - \"y\"\n        - \"2\"\n        - \"-v\"\n        - \"z\"\n        - \"2\"\n        - \"-in\"\n        - \"./in.reaxff.hns\"\n        - \"-nocite\"\n        # Resource requests and limits for a CPU-bound computational workload.\n        # Setting requests equal to limits provides a 'Guaranteed' Quality of Service (QoS) class,\n        # which is recommended for non-burstable, performance-sensitive batch jobs.\n        resources:\n          requests:\n            cpu: \"1\"         # Request 1 full CPU core.\n            memory: \"2Gi\"    # Request 2 GiB of memory.\n          limits:\n            cpu: \"1\"         # Limit to 1 full CPU core.\n            memory: \"2Gi\"    # Limit to 2 GiB of memory.",
        "attempts": 0,
        "metadata": {
            "logs": [
                {
                    "item": "LAMMPS (22 Jul 2025 - Development - 8b7fdf9)\nOMP_NUM_THREADS environment is not set. Defaulting to 1 thread.\n  using 1 OpenMP thread(s) per MPI task\nReading data file ...\n  triclinic box = (0 0 0) to (22.326 11.1412 13.778966) with tilt (0 -5.02603 0)\n  1 by 1 by 1 MPI processor grid\n  reading atoms ...\n  304 atoms\n  reading velocities ...\n  304 velocities\n  read_data CPU = 0.003 seconds\nReplication is creating a 2x2x2 = 8 times larger system...\n  triclinic box = (0 0 0) to (44.652 22.2824 27.557932) with tilt (0 -10.05206 0)\n  1 by 1 by 1 MPI processor grid\n  bounding box image = (0 -1 -1) to (0 1 1)\n  bounding box extra memory = 0.03 MB\n  average # of replicas added to proc = 8.00 out of 8 (100.00%)\n  2432 atoms\n  replicate CPU = 0.000 seconds\nNeighbor list info ...\n  update: every = 20 steps, delay = 0 steps, check = no\n  max neighbors/atom: 2000, page size: 100000\n  master list distance cutoff = 11\n  ghost atom cutoff = 11\n  binsize = 5.5, bins = 10 5 6\n  2 neighbor lists, perpetual/occasional/extra = 2 0 0\n  (1) pair reaxff, perpetual\n      attributes: half, newton off, ghost\n      pair build: half/bin/ghost/newtoff\n      stencil: full/ghost/bin/3d\n      bin: standard\n  (2) fix qeq/reax, perpetual, copy from (1)\n      attributes: half, newton off\n      pair build: copy\n      stencil: none\n      bin: none\nSetting up Verlet run ...\n  Unit style    : real\n  Current step  : 0\n  Time step     : 0.1\nPer MPI rank memory allocation (min/avg/max) = 215 | 215 | 215 Mbytes\n   Step          Temp          PotEng         Press          E_vdwl         E_coul         Volume    \n         0   300           -113.27833      437.52149     -111.57687     -1.7014647      27418.867    \n        10   299.38517     -113.27631      1439.2564     -111.57492     -1.7013814      27418.867    \n        20   300.27107     -113.27884      3764.4017     -111.57762     -1.7012246      27418.867    \n        30   302.21064     -113.28428      7007.6558     -111.58335     -1.7009364      27418.867    \n        40   303.52265     -113.28799      9844.8196     -111.58747     -1.7005186      27418.867    \n        50   301.8706      -113.28324      9663.08       -111.58318     -1.7000523      27418.867    \n        60   296.67808     -113.26777      7273.8875     -111.56815     -1.6996136      27418.867    \n        70   292.19999     -113.25435      5533.625      -111.55514     -1.6992157      27418.867    \n        80   293.58678     -113.25831      5993.4679     -111.55946     -1.6988532      27418.867    \n        90   300.62637     -113.27925      7202.8453     -111.58069     -1.6985592      27418.867    \n       100   305.38277     -113.29357      10085.747     -111.59518     -1.6983875      27418.867    \nLoop time of 16.6408 on 1 procs for 100 steps with 2432 atoms\n\nPerformance: 0.052 ns/day, 462.244 hours/ns, 6.009 timesteps/s, 14.615 katom-step/s\n99.9% CPU use with 1 MPI tasks x 1 OpenMP threads\n\nMPI task timing breakdown:\nSection |  min time  |  avg time  |  max time  |%varavg| %total\n---------------------------------------------------------------\nPair    | 12.046     | 12.046     | 12.046     |   0.0 | 72.39\nNeigh   | 0.27838    | 0.27838    | 0.27838    |   0.0 |  1.67\nComm    | 0.0056403  | 0.0056403  | 0.0056403  |   0.0 |  0.03\nOutput  | 0.00027948 | 0.00027948 | 0.00027948 |   0.0 |  0.00\nModify  | 4.3097     | 4.3097     | 4.3097     |   0.0 | 25.90\nOther   |            | 0.0009164  |            |       |  0.01\n\nNlocal:           2432 ave        2432 max        2432 min\nHistogram: 1 0 0 0 0 0 0 0 0 0\nNghost:          10685 ave       10685 max       10685 min\nHistogram: 1 0 0 0 0 0 0 0 0 0\nNeighs:         823958 ave      823958 max      823958 min\nHistogram: 1 0 0 0 0 0 0 0 0 0\n\nTotal # of neighbors = 823958\nAve neighs/atom = 338.79852\nNeighbor list builds = 5\nDangerous builds not checked\nTotal wall time: 0:00:17\n",
                    "type": "log",
                    "attempt": 0
                },
                {
                    "item": "# This manifest creates a Kubernetes Job to run a single LAMMPS simulation.\n# It is designed for a standard Google Cloud Kubernetes Engine (GKE) environment using CPU instances.\napiVersion: batch/v1\nkind: Job\nmetadata:\n  # The name of the Job. Must be unique within the namespace.\n  name: lammps-reaxff-hns-job\nspec:\n  # The number of retries before considering a Job as failed.\n  # Set to 1 as requested, meaning it will try once and if it fails, it will retry one more time.\n  backoffLimit: 1\n  # The template for the Pod that the Job will create.\n  template:\n    spec:\n      # The restart policy for the Pod. 'OnFailure' is appropriate for Jobs.\n      # 'Never' is also a valid option, ensuring the Job controller creates a new Pod on failure.\n      restartPolicy: OnFailure\n      containers:\n      - name: lammps # The exact container name as requested.\n        # The Docker image to use. Note: 'lammps' is used here as a placeholder.\n        # In a real environment, this would be a fully-qualified image path\n        # like 'docker.io/lammps/lammps:latest' or a private registry path.\n        image: lammps\n        # imagePullPolicy is set to 'Never' as requested.\n        # This means the image must already be present on the cluster nodes.\n        imagePullPolicy: Never\n        # The command and arguments for the container, executing the LAMMPS simulation.\n        # The command executable must be in the container's PATH.\n        command: [\"lmp\"]\n        args:\n        - \"-v\"\n        - \"x\"\n        - \"2\"\n        - \"-v\"\n        - \"y\"\n        - \"2\"\n        - \"-v\"\n        - \"z\"\n        - \"2\"\n        - \"-in\"\n        - \"./in.reaxff.hns\"\n        - \"-nocite\"\n        # Resource requests and limits for a CPU-bound computational workload.\n        # Setting requests equal to limits provides a 'Guaranteed' Quality of Service (QoS) class,\n        # which is recommended for non-burstable, performance-sensitive batch jobs.\n        resources:\n          requests:\n            cpu: \"1\"         # Request 1 full CPU core.\n            memory: \"2Gi\"    # Request 2 GiB of memory.\n          limits:\n            cpu: \"1\"         # Limit to 1 full CPU core.\n            memory: \"2Gi\"    # Limit to 2 GiB of memory.",
                    "type": "final-result",
                    "total_seconds": 47.37228536605835
                }
            ]
        }
    }
]